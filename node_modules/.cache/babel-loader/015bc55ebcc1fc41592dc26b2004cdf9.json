{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: response.data,\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const fetchMore = useCallback(async () => {\n    if (paginatedTransactions === null) ;\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    fetchMore,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"Zxt5eGAbRlcaHnkWo6sEDN6vjmI=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","data","fetchMore","invalidateData"],"sources":["/Users/kayresantos/Downloads/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  Transaction,\n} from \"../utils/types\";\nimport { PaginatedTransactionsResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [\n    paginatedTransactions,\n    setPaginatedTransactions,\n  ] = useState<PaginatedResponse<Transaction[]> | null>(null);\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<\n      PaginatedResponse<Transaction[]>,\n      PaginatedRequestParams\n    >(\"paginatedTransactions\", {\n      page:\n        paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n    });\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      return { data: response.data, nextPage: response.nextPage };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const fetchMore = useCallback(async () => {\n    if (paginatedTransactions === null) ;\n\n    const response = await fetchWithCache<\n      PaginatedResponse<Transaction[]>,\n      PaginatedRequestParams\n    >(\"paginatedTransactions\", {\n      page: paginatedTransactions.nextPage,\n    });\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage,\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    fetchMore,\n    invalidateData,\n  };\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAOA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CACJI,qBADI,EAEJC,wBAFI,IAGFN,QAAQ,CAA0C,IAA1C,CAHZ;EAKA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC,MAAMS,QAAQ,GAAG,MAAML,cAAc,CAGnC,uBAHmC,EAGV;MACzBM,IAAI,EACFJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IAFpC,CAHU,CAArC;IAQAJ,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBG,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOH,QAAP;MACD;;MAED,OAAO;QAAEI,IAAI,EAAEJ,QAAQ,CAACI,IAAjB;QAAuBF,QAAQ,EAAEF,QAAQ,CAACE;MAA1C,CAAP;IACD,CANuB,CAAxB;EAOD,CAhB2B,EAgBzB,CAACP,cAAD,EAAiBE,qBAAjB,CAhByB,CAA5B;EAkBA,MAAMQ,SAAS,GAAGd,WAAW,CAAC,YAAY;IACxC,IAAIM,qBAAqB,KAAK,IAA9B,EAAoC;IAEpC,MAAMG,QAAQ,GAAG,MAAML,cAAc,CAGnC,uBAHmC,EAGV;MACzBM,IAAI,EAAEJ,qBAAqB,CAACK;IADH,CAHU,CAArC;IAOAJ,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBG,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOH,QAAP;MACD;;MAED,OAAO;QACLI,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGJ,QAAQ,CAACI,IAAvC,CADD;QAELF,QAAQ,EAAEF,QAAQ,CAACE;MAFd,CAAP;IAID,CATuB,CAAxB;EAUD,CApB4B,EAoB1B,CAACP,cAAD,EAAiBE,qBAAjB,CApB0B,CAA7B;EAsBA,MAAMS,cAAc,GAAGf,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IACLM,IAAI,EAAEP,qBADD;IAELD,OAFK;IAGLG,QAHK;IAILM,SAJK;IAKLC;EALK,CAAP;AAOD;;GA1DeZ,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}